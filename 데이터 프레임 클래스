import pandas as pd
import numpy as np
print("데이터프레임 클래스")
print("\n")

#데이터프레임 생성
"""
1.우선 하나의 열이 되는 데이터 리스트 일차원 배열을 준비한다
2.이 각각의 열에 대한 이름(라벨) 키로 가지는 딕셔너리를 만든다
3.이 데이터를 DataFrame 클래스 생성자에 넣는다. 동시에 열방향 인덱스는 columns 인수로
  행 방향 인덱스는 index인수로 저장한다
"""
print("데이터프레임 생성")
data = {
    "2015" : [9904312, 3448737, 2890451, 2466052],
    "2010" : [9631482, 3393191, 2632035, 2431774],
    "2005" : [9762546, 3512547, 2517680, 2456016],
    "2000" : [9853972, 3655437, 2466338, 2473990],
    "지역"  : ["수도권","경상권","수도권","경상권"],
    "2010-2015 증가율": [0.0283, 0.0163, 0.0982, 0.0141]
}
columns = ["지역", "2015", "2010", "2005", "2000", "2010-2015 증가율"]
index = ["서울","부산","인천","대구"]
df = pd.DataFrame(data, index=index, columns=columns)
print(df)
print("\n")
print("df.values(데이터만 접근하고싶을때)\n {}".format(df.values))
print("df.columns\n {}".format(df.columns))
print("df.index\n {}".format(df.index))
print("\n")
#가로방향 인덱스와 세로방향 인덱스에 이름을 붙이는것이 가능하다
df.index.name = "도시"
df.columns.name = "특성"
print(df)
print("\n")

print("연습문제 4.1.2")
#다음 조건을 만족하는 임의의 데이터프레임을 만든다
#(1) 열의 갯수와 행의 갯수가 각 5개 이상이여야한다
#(2) 열에는 정수, 문자열 ,실수 자료형 데이터가 각각 1개 이상씩 포함되어야한다
print("\n")
print("데이터프레임")
data_p1 = {
    "브론즈" : [180, 173, 186, 175, 189, 172, 183],
    "실버"  : [193, 186, 197, 186, 204, 184, 194],
    "골드"  : [199, 192, 202, 191, 208, 189, 199],
    "플래티넘": [200, 194, 203, 193, 209, 191, 201],
    "김태현" : [198,192,162,232,193,203,163]
}
columns_p1 = ["김태현","브론즈","실버","골드","플래티넘"]
index_p1 = ["징크스","이즈리얼","제리","트리스타나","시비르","진","카이사"]
df_p1 = pd.DataFrame(data_p1, index=index_p1, columns=columns_p1)
print(df_p1)
print("\n")

#열 데이터의 갱신,추가,삭제
# "2010-2015 증가율"이라는 이름의 열 추가

#열 인덱싱
print("열 인덱싱")
"""
데이터프레임은 열 라벨을 키로, 열 시리즈를 값으로 가지는 딕셔너리와 비슷
따라서 데이터프레임을 인덱싱을 할 때도 열 라벨(columns label)을 키값으로 생각하여 인덱싱 가능
"""
print("\n하나의 열만 인덱싱하면 시리즈 반환\n {}".format(df["지역"]))
print("\n여러개의 열을 인덱싱하면 부분적인 데이터프레임 반환\n {}".format(df[["2010","2015"]]))
print("\n2010이라는 열을 반환하면서 데이터프레임 자료형 유지\n {}".format(df[["2010"]]))

#원래부터 문자열이 아닌 정수형 열 인덱스를 가지는 경우 인덱스값으로 정수 사용가능
print("\n")
print("정수형 인덱스")
df2 = pd.DataFrame(np.arange(12).reshape(3,4))
print(df2)
print("\ndf2[2]\n {}".format(df2[2]))
print("\ndf2[[1,2]\n {}".format(df2[[1,2]]))
print("\n")

#행 인덱싱
print("행 인덱싱")
#행 단위로 인덱싱을 하고자 하면 항상 슬라이싱을 해야한다. 인덱스 값이 문자라벨이면 라벨 슬라이싱도 가능
print("\ndf[:1]\n {}".format(df[:1]))
print("\ndf[1:2]\n {}".format(df[1:2]))
# df["서울":"부산"] << 라벨로 슬라이싱 가능

#연습 문제 4.1.3
print("\n연습 문제 4.1.3\n")
"""
(1) 모든 학생의 수학 점수를 시리즈로 나타낸다.
(2) 모든 학생의 국어와 영어 점수를 데이터 프레임으로 나타낸다.
(3) 모든 학생의 각 과목 평균 점수를 새로운 열에 추가한다.
(4) 방자의 영어 점수를 80점으로 수정하고 평균 점수도 다시 계산한다.
(5) 춘향의 점수를 데이터프레임으로 나타낸다.
(6) 향단의 점수를 시리즈로 나타낸다.
"""
data_p2 = {
    "국어": [80,90,70,30],
    "영어": [90,70,60,40],
    "수학": [90,60,80,70],
}
columns_p2 = ["국어","영어","수학"]
index_p2 = ["춘향","몽룡","향단","방자"]
df_p2 = pd.DataFrame(data_p2, index=index_p2, columns=columns_p2)
print(df_p2)
print("\n")
# (1)
print("(1)\n{}".format(df_p2["수학"]))
# (2)
print("\n(2)\n{}".format(df_p2[["국어","영어"]]))
# (3)
print("\n평균점수\n")
df_p2["과목합"] = df_p2["국어"] + df_p2["영어"] + df_p2["수학"]
df_p2["평균"] = df_p2["과목합"] / 3
print(df_p2)
# (4)
print("\n방자 영어 점수 80점으로 수정\n")
df_p2["영어"]["방자"] = 80
print(df_p2)
# (5)
print("\n춘향의 점수 데이터프레임\n{}".format(df_p2[:"춘향"]))
