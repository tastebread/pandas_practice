import numpy as np
import pandas as pd
import seaborn as sns
#데이터프레임의 데이터 조작
print("데이터 갯수 세기")
#count 메서드를 사용한다 단 NaN값은 세지 않는다
s = pd.Series(range(10))
s[3] = np.nan
print("\n{}".format(s))
print("\n s 데이터의 갯수 {}".format(s.count()))

#데이터프레임에서는 각 열마다 별도로 데이 갯수를 센 데이에서 값이 누락된 부분을 찾을때 유용
np.random.seed(2)
df = pd.DataFrame(np.random.randint(5, size=(4,4)), dtype=float)
df.iloc[2,3] = np.nan
print("\n")
print(df)
print("\n")
print(df.count())
print("\n")

#카테고리 값 세기
#시리즈의 값이 정수, 문자열, 카테고 값인 경우에 value_counts 메서드로
#각각의 값이 나온 횟수를 셀 수 있다.
np.random.seed(1)
s2 = pd.Series(np.random.randint(6, size=100))
s2.tail()
print(s2.value_counts())

#데이터프레임에는 value_counts 메서드 없으므로 각 열마 별도로 적용
df[0].value_counts()
print("\n")
print("정렬")
#데이터를 정렬하려면 sort_index 메서드 를 사용한다 -> 인덱스 값을 기준으
#sort_values 메서드는 데이터 값을 기준으로 정렬한다
print("\n")
print(s2.value_counts().sort_index())
print("\n")

#큰 수에서 작은 수로 반대 방향 정렬하려면 ascending=False 인수를 저장한다
print(s.sort_values(ascending=False))
print("\n")

#데이터프레임에서 sort_values 메서드를 사용하려 by인수로 정렬 기준이 되는 열을
#지정 주어야 한다
print(df.sort_values(by=1))

#by 인수에 리스트 값을 넣으면 이 순서대로 정렬의 기준의 우선 순위가 된다
#리스트의 첫번째 열로 기준으 정렬한 후 동일한 값이 나오면 그 다음 열로 순서를 따지게됨
print("\n")
print(df.sort_values(by=[1,2]))

#행/열 합계
print("행/열합계")
#행과 열의 합계를 구할 때는 sum(axis) 메서드를 사용한 axis 인수에는
#합계로 인해 없어지는 방향 (0=행 , 1=열)을 지정한다
print("\n")
np.random.seed(1)
df3 = pd.DataFrame(np.random.randint(10, size=(4,8)))
print(df3)

print("\n행방향 합계\n{}".format(df3.sum(axis=1)))
#행방향 합계 => sum(axis=1)
#열방향 합계 => sum(axis=0)
#평균 구하기 => mean 메서드 활용 ex) sum() 과 사용법이 같다
print("\n")
df3["RowSum"] = df3.sum(axis=1)
print(df3)
